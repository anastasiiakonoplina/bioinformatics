k = 11
dna = 'CTTGGTGAACTTACCGTCTTAAACTCAGACAGCATGTAGGACCCTTCGCGAACCCTATTACAGCCCTGGAGGGGATCCATCTACGTTTTATGGTGCCATTTCATTCCGGCTTAGTAGCACTGAATATAGGTTCATATTTATAATTCTCGGATTCTAAAGAGCATGGAGTAACAGCCGGGTAGTCATGAGAATAGACTGTTAGACTTGGCAGTATCAATTTGTCTCAAGCAAACGCGTTATCGGACCGTTTGTAGTAAACCCAAGGACGCGATACAGAAGCGAAGTTCAGGACTACATGCCCCATGCGCTACCCAGTGAAAAAGGGTGTCGAGACTTGCGTTGAATGGGTGTAGAAAAACGCCCCATGGTAGGGACGTGGACTGATCTGCAGGATTTCAAAAATACTCGCGCGTGGAGCCGATGATGGATAAATGGGTCGGCACAGGCAGTTCCATTCGGCACCAAATCCCTTGTGTAACCGGCATTAATATCCCCCTTGTGACGCGTTGGGCATTACGGAGCCGACACTCACATTAGGCCGGCTAAGGCCCACGCGAGAGAGCATTGCCAAAATCCATATTTTTAGGTATTGTGCGTTAAGCACGTTGAAAGAAAGTACACGCCGTATTGAGAGCGTGTAGGATTGGAGCTATTGGAGTTCGGGCTAATCAAATGTCTTCCGCGAGCAGATGGCTGTGAAGTACCGCCCTAGCGGGGCACACGCATGTCGGATAACCCAGAGGATGTTAACCTATCAAACTCTCGCAGGAGACGGTAAGAACGACCAATCTACGAAGAGAGGGCGTACTCAAATTTAAGCTATCACACCTGAACTCACTGATATATGACCTCACCCAGCGCCCAAGGGGTCAAAGGTCCGTTCATCATCCGCTCCGACTCGGACCCGAACCGGTGAGGCTCGCACGACGATGAATGGCACAAAGACGTTTATCGTCTTAGTTCTCTATTAGAGACATTACCAATTGTGGACCGTTGACGACTGATCCGCGACAATCTACGAAGGTCTATAGATAGCAAGGGCCCGTATCTTCACTCGTTGCGGACCGGACACTCTAGGACCTCATTCGCTACACTTCCCATCTTATCGTCTGTGCTGGATCTAGACCCTTACGAATCTTAGCCGTTACAACTTACAAGCTCGTACCAATCTGACGTCTGATGCAAAGGTCGTGCAGACGATTGAGTCGCACTACAAGTATGATACGTGCCAGTACAATTGGAAAATTCGTGACGGTACTGTCTTATGGGGGGCATCGCTGTGATCCCTAGACTAAGAAACGTGAACGCGCGACTTCAATCCCCACATAGTTGGGACTCAACCTCTGGTAGTCGTCACTCCACTGTCCAGATATCCCATCCGCAATTAAGGCAGTAATCTACTATGGGACTCGTTCTTTCTCCGGTGATTAGAATGTGAATTCATTCTGCCAAATGGGTCTTCCATGTTTACCCGTGGGCACACATCAATCTAAATGCCTCAAGAGCCCCACCGGAGGTCCCCCCTTGCGTTGGGCTTGTTTCTTCTGAGCTGGAATAGGTATTGCCTAACACTCTCGCACTTTCAACCGCCGTTCGATCCAAGAGTTCTGCCCGACATGGATGCCCCCGACTTTGATGCTAGACAGGTTTCCACAACAGAGTTAGTTTTCTCACGTTCGTGACCAGCTCCAAGTATTATAGTCTTGTGACCCACAGGCTTAAACAAAACAGGTCACCGACCTGGCAAAAGGATGTTATACCAAATGACTTATCCACGAGGCGTCCATGGGTCCAGCTTGGAAGTCAGAAGTGTATGGACCGTCCAACGCGACACTAAGACCCTCCTCCGACTGATAGCTATCTGGTATCGGGGAACAAACAATAGCCCCACGCCAGTGTGAGGGCTCCGCGACCGCGAACAGTCACGAGGGAAAACACCCCCGGGGACAGAATAAAGGGGACGCTGGCTCACTGTAAGCCTAAATCCTACAACGTCGGGT'

def composition(string, k):
	comp = []
	for i in range(0, len(string) - k + 1):
		comp.append(string[i:i+k])
		comp = sorted(comp)
	return comp


def suf(string):
	return string[1:]

def pref(string):
	k = len(string)
	return string[0:k-1]

def deBruijn(dna, k):
	res = []
	edges = []
	kmers = {}
	kmers1 = composition(dna, k)
	kmers2 = list(kmers1)
	for kmer1 in kmers1:
		for kmer2 in kmers2:
			if suf(kmer1) == pref(kmer2):
				edges.append([kmer1, kmer2])
				kmers2.remove(kmer2)
	for pair in edges:
		if pair[0] not in kmers.keys():
			kmers[pair[0]] = pair[1]
		else:
			kmers[pair[0]] = ",".join([kmers[pair[0]], pair[1]])
	keys = sorted(kmers.keys())
	for key in keys:
		res.append(' -> '.join([key, kmers[key]]))
	res = '\n'.join(res)
	return res

print deBruijn(dna, k)